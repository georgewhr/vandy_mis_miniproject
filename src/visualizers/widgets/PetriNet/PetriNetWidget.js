/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 14 2021 10:39:10 GMT-0500 (Central Daylight Time).
 */

define(['jointjs', 'css!./styles/PetriNetWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'sim-s-m';

    function PetriNetWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriNetWidget.prototype._initialize = function () {
        console.log(joint);
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointSM = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointSM,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            // console.log(currentElement);
            if (self._webgmeSM) {
                // console.log(self._webgmeSM.id2state[currentElement.id]);
                self._setCurrentState(self._webgmeSM.id2state[currentElement.id]);
            }
        });

        this._webgmeSM = null;
    };

    PetriNetWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // State Machine manipulating functions called from the controller
    PetriNetWidget.prototype.initMachine = function (machineDescriptor) {
        const self = this;
        console.log(machineDescriptor);

        self._webgmeSM = machineDescriptor;
        self._webgmeSM.current = self._webgmeSM.init;
        self._jointSM.clear();
        const sm = self._webgmeSM;
        sm.id2state = {}; // this dictionary will connect the on-screen id to the state id
        // first add the states
        var pn = joint.shapes.pn;

        console.log(JSON.stringify(sm))
        Object.keys(sm.states).forEach(stateId => {
            let vertex = null;
            console.log("in widget ini, stateId is "+stateId)
            console.log("in widget ini, sm.states[stateId].position "+JSON.stringify(sm.states[stateId].position))
            if (sm.states[stateId].name == "Transition") {
                console.log("in widget ini, is Transition")
                vertex = new pn.Transition({
                    position: sm.states[stateId].position,
                    attrs: {
                        '.label': {
                            'text': 'produce',
                            'fill': '#fe854f'
                        },
                        '.root': {
                            'fill': '#9586fd',
                            'stroke': '#9586fd'
                        }
                    }
                });
            // Places
            } else {
                console.log("in widget ini, is Places")
                    vertex = new pn.Place({
                    position: sm.states[stateId].position,
                    attrs: {
                        '.label': {
                            'text': 'ready',
                            'fill': '#7c68fc' },
                        '.root': {
                            'stroke': '#9586fd',
                            'stroke-width': 3
                        },
                        '.tokens > circle': {
                            'fill': '#feb662'
                        }
                    },
                    tokens: 2
                });
            }
            vertex.addTo(self._jointSM);
            sm.states[stateId].joint = vertex;
            sm.id2state[vertex.id] = stateId;
        });

        // then create the links
        Object.keys(sm.states).forEach(stateId => {
            const state = sm.states[stateId];
            Object.keys(state.next).forEach(event => {
                state.jointNext = state.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: state.joint.id},
                    target: {id: sm.states[state.next[event]].joint.id},
                    attrs: {
                        line: {
                            strokeWidth: 2
                        },
                        wrapper: {
                            cursor: 'default'
                        }
                    },
                    labels: [{
                        position: {
                            distance: 0.5,
                            offset: 0,
                            args: {
                                keepGradient: true,
                                ensureLegibility: true
                            }
                        },
                        attrs: {
                            text: {
                                text: event,
                                fontWeight: 'bold'
                            }
                        }
                    }]
                });
                link.addTo(self._jointSM);
                state.jointNext[event] = link;
            })
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decorateMachine();
        console.log(JSON.stringify(sm))
    };

    PetriNetWidget.prototype.destroyMachine = function () {

    };

    function fireTransition(g, t, sec) {

        var inbound = g.getConnectedLinks(t, { inbound: true });
        var outbound = g.getConnectedLinks(t, { outbound: true });
    
        var placesBefore = inbound.map(function(link) {
            return link.getSourceElement();
        });
        var placesAfter = outbound.map(function(link) {
            return link.getTargetElement();
        });
    
        var isFirable = true;
        placesBefore.forEach(function(p) {
            if (p.get('tokens') === 0) {
                isFirable = false;
            }
        });
    
        if (isFirable) {
    
            placesBefore.forEach(function(p) {
                // Let the execution finish before adjusting the value of tokens. So that we can loop over all transitions
                // and call fireTransition() on the original number of tokens.
                setTimeout(function() {
                    p.set('tokens', p.get('tokens') - 1);
                }, 0);
    
                var links = inbound.filter(function(l) {
                    return l.getSourceElement() === p;
                });
    
                // links.forEach(function(l) {
                //     var token = V('circle', { r: 5, fill: '#feb662' });
                //     l.findView(paper).sendToken(token, sec * 1000);
                // });
            });
    
            placesAfter.forEach(function(p) {
    
                var links = outbound.filter(function(l) {
                    return l.getTargetElement() === p;
                });
    
                // links.forEach(function(l) {
                //     var token = V('circle', { r: 5, fill: '#feb662' });
                //     l.findView(paper).sendToken(token, sec * 1000, function() {
                //         p.set('tokens', p.get('tokens') + 1);
                //     });
                // });
            });
        }
    }

    PetriNetWidget.prototype.fireEvent = function () {
        // console.log("georgewhr PetriNetWidget.prototype.fireEvent")
        // const self = this;
        // const current = self._webgmeSM.states[self._webgmeSM.current];
        // console.log(JSON.stringify(current))
        
        // if(current["marking"]){
        //     current["marking"] = current["marking"]  -1
        // }
        
        // const link = current.jointNext[event];
        // const linkView = link.findView(self._jointPaper);
        // linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), {duration:500}, function() {
        //    self._webgmeSM.current = current.next[event];
        //    console.log(JSON.stringify(self._webgmeSM.current))
        //    self._decorateMachine();
        // });

        console.log()

        const sm = this._webgmeSM;
        Object.keys(sm.states).forEach(stateId => {
            console.log(stateId)
            if (Math.random() < 0.7) {
                fireTransition(this._jointSM,sm.states[stateId].joint, 1);
            }
        });

    };

    PetriNetWidget.prototype.resetMachine = function () {
        this._webgmeSM.current = this._webgmeSM.init;
        this._decorateMachine();
    };

    PetriNetWidget.prototype._decorateMachine = function() {
        const sm = this._webgmeSM;
        Object.keys(sm.states).forEach(stateId => {
            console.log(stateId)
            this._jointSM.addCell(sm.states[stateId].joint)
            var inbound = this._jointSM.getConnectedLinks(sm.states[stateId].joint, { inbound: true });
            // sm.states[stateId].joint.attr('body/stroke', '#333333');

        });
        // sm.states[sm.current].joint.attr('body/stroke', 'blue');
        // sm.setFireableEvents(Object.keys(sm.states[sm.current].next));
    };

    PetriNetWidget.prototype._setCurrentState = function(newCurrent) {
        this._webgmeSM.current = newCurrent;
        this._decorateMachine();
    };
    

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetWidget.prototype.destroy = function () {
    };

    PetriNetWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetWidget has been activated');
    };

    PetriNetWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetWidget has been deactivated');
    };

    return PetriNetWidget;
});
